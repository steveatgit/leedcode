You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Subscribe to see which companies asked this question.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
         ListNode *head = NULL;
         ListNode *tail = NULL;
         int flag = 0;
         while(l1 || l2) {
             int val1 = 0;
             if(l1) {
                 val1 = l1->val;
                 l1 = l1->next;
             }
             int val2 = 0;
             if(l2) {
                 val2 = l2->val;
                 l2 = l2->next;
             }
             int tmp = val1+val2+flag;
             ListNode *pNode = new ListNode(tmp%10);
             flag = tmp/10;
             if(head == NULL) {
                 head = tail = pNode;
             } else {
                 tail->next = pNode;
                 tail = pNode;
             }
         }
         if(flag == 1) {
             tail->next = new ListNode(1);
         }
         return head;
    }
};
