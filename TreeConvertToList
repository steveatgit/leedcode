程序员面试100题1）二叉树转化为双向链表
题目：输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。要求不能创 建任何新的结点，只调整指针的指向。   比如将二元查找树  
转换成双向链表 4=6=8=10=12=14=16，实际上就是中序遍历
思路：我们可以中序遍历整棵树。按照这个方式遍历树，比较小的结点先访问。如果 我们每访问一个结点，假设之前访问过的结点已经调整成一个排序双向链表，
我们再把调整 当前结点的指针将其链接到链表的末尾。当所有结点都访问过之后，整棵树也就转换成一个 排序双向链表了。 
#include<iostream>
#include<queue>
using namespace std;

struct BinaryTreeNode
{
	BinaryTreeNode *left;
	BinaryTreeNode *right;
	int elem;
};
void addBinaryTree(BinaryTreeNode *&root, int elem)
{
	if (NULL == root) {
		BinaryTreeNode *pNode = new BinaryTreeNode();
		pNode->elem = elem;
		pNode->left = NULL;
		pNode->right = NULL;
		root = pNode;
	}
	else {
		if (elem < root->elem) {
			addBinaryTree(root->left, elem);
		}
		else if (elem > root->elem) {
			addBinaryTree(root->right, elem);
		}
		else {
			cout << "overlapping." << endl;
		}
	}
}
// 中序遍历得到双向链表
void convertList(BinaryTreeNode* node, BinaryTreeNode *&lastOfList)
{
	if (NULL == node) {
		return;
	}
	BinaryTreeNode *pCurrent = node;
	if (node->left) {
		convertList(node->left, lastOfList);
	}
	// 双向链表建立
	pCurrent->left = lastOfList;
	if (lastOfList) {
		lastOfList->right = pCurrent;
	}
	lastOfList = pCurrent;
	if (node->right) {
		convertList(node->right, lastOfList);
	}
}
BinaryTreeNode* getList(BinaryTreeNode* node)
{
	if (NULL == node) {
		return NULL;
	}
	BinaryTreeNode *headOfList = NULL;
	convertList(node, headOfList);
	while (headOfList && headOfList->left) {
		headOfList = headOfList->left;
	}
	return headOfList;
}

int main()
{
	BinaryTreeNode *root = NULL;
	int elems[6] = { 24, 15, 27, 4, 43, 87 };
	for (int i = 0; i< 6; i++) {
		addBinaryTree(root, elems[i]);
	}
	BinaryTreeNode *headOfList = getList(root);
	while (headOfList) {
		cout << headOfList->elem << " ";
		headOfList = headOfList->right;
	}
	cout << endl;
	return 0;
}
// 4 15 24 27 43 87
