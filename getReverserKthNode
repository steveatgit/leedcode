// 得到倒数第k个节点
#include<iostream>
using namespace std;

struct List
{
	List *next;
	int data;
};
void createList(List *&head, int arr[], int n)
{
	if (n <= 0 || NULL == arr) {
		return;
	}
	List *tail = head;
	for (int i = 0; i < n; i++) {
		List *pNode = new List();
		pNode->next = NULL;
		pNode->data = arr[i];
		
		if (NULL == head) {
			head = pNode;
			tail = pNode;
		}
		else {
			tail->next = pNode;
			tail = pNode;
		}
	}
}
List *getReverseKthNode(List *head, int k)
{
	if (NULL == head || k<=0) {
		return NULL;
	}
	List *slow = head;
	List *fast = head;
	for (int i = 0; i<k; i++) {
		if (fast) {   // 这里不是fast->next，用极限值去测测，倒数第四个节点
       fast = fast->next;
		}
		else {
			return NULL;
		}
	}
	while (fast) {
		slow = slow->next;
		fast = fast->next;
	}
	return slow;
}
int main()
{
	int arr[4] = { 1, 2, 3, 4 };
	List *head = NULL;
	createList(head, arr, 4);
	List *node = getReverseKthNode(head, 2);
	cout << node->data << endl;
}
