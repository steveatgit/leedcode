class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        set<vector<int> > ret;
        permuteUnique_core(ret, 0, nums.size()-1, nums);
        return vector<vector<int> >(ret.begin(), ret.end());
    }
    void permuteUnique_core(set<vector<int> >&ret, int start, int end, vector<int> &nums) {
        if(start == end) {
            ret.insert(nums);
        }
        for(int i=start;i<=end;i++) {
            if (i != start && nums[i] == nums[start]) {
                continue;
            }
            swap(nums[i], nums[start]);
            permuteUnique_core(ret, start+1, end, nums);
            swap(nums[i], nums[start]);
        }
    }
    void swap(int &a, int &b) {
        int tmp = a;
        a = b;
        b = tmp;
    }
};
