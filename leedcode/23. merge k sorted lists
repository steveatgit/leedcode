/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) {
            return NULL;
        }
        if (lists.size() == 1) {
            return lists[0];
        }
        int size = lists.size();
        int mid = (size+1)/2;
        vector<ListNode*> vec1(lists.begin(), lists.begin()+mid);   //[lists.begin(), lists.begin()+mid)
        ListNode *l1 = mergeKLists(vec1);
        vector<ListNode*> vec2(lists.begin()+mid, lists.end());
        ListNode *l2 = mergeKLists(vec2);
        return mergeLists(l1, l2);
    }
    ListNode* mergeLists(ListNode* l1, ListNode* l2)
    {
        ListNode* head = new ListNode(0);
        ListNode* tail = head;
        while(l1 && l2) {
            if(l1->val < l2->val) {
                tail->next = l1;
                l1 = l1->next;
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        if(l1) {
            tail->next = l1;
        }
        if(l2) {
            tail->next = l2;
        }
        return head->next;
    }
};
