// 非递归
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int> > ret;
        vector<int> emp;
        ret.push_back(emp);  //这个不能少，这样ret.size大小为1，进行下面的循环
        if(nums.size()<=0) {
            return ret;
        }
        sort(nums.begin(), nums.end());
        for(int i=0;i<nums.size();i++) {
            int size = ret.size();
            for(int j=0;j<size;j++) {
                vector<int> vec;
                for(vector<int>::iterator iter = ret[j].begin();iter!=ret[j].end();iter++) {
                    vec.push_back(*iter);
                }
                vec.push_back(nums[i]);
                ret.push_back(vec);
            }
        }
        return ret;
    }
};

//递归
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
       vector<vector<int> > ret;
       vector<int> vec;  //  注意这里不能ret.push_back(emp),否则{}会重复
       if(nums.size()<=0) {
           return ret;
       }
       subsetsCore(ret, 0, vec, nums);
       return ret;
    }
    void subsetsCore(vector<vector<int> >&ret, int start, vector<int> &vec, vector<int>& nums)
    {
        if(start == nums.size()) {
            ret.push_back(vec);
            return;
        }
        vec.push_back(nums[start]);
        subsetsCore(ret, start+1, vec, nums);
        vec.pop_back();
        subsetsCore(ret, start+1, vec, nums);
    }
};
