class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        if(nums.size() == 0) {
            return;
        }
        int i = nums.size() - 1;
        while(i>0 && nums[i-1] >= nums[i]) {  //  注意相等的情况
            i--;
        }  // 1. 找到最后的升序排列
        if(i ==0) { //  2. 全是降序排列
            reverse(nums.begin(), nums.end());
            return;
        }
        int j = nums.size() - 1;
        while(j>0 && nums[j] <= nums[i-1]) {  //  注意相等的情况
            j--;
        }    // 3. 找到最后比升序排列首元素大的位置
        int tmp = nums[i-1];
        nums[i-1] = nums[j];
        nums[j] = tmp; // 4. 交换元素
        reverse(nums.begin()+i, nums.end());  // 5. 反序排列
    }
};
