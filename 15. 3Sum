class Solution {
public:
    vector<vector<int> > ret;
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size() <3) 
            return ret;
        sort(nums.begin(), nums.end());
        for(int i=0;i<nums.size()-2;i++) {
            if(i != 0 && nums[i] == nums[i-1])  // get rid of duplication
                continue;
            find(nums, i+1, nums.size()-1, nums[i]);  // abcd (a and bcd), then (b and cd not need b and acd)
        }
        return ret;
    }
    void find(vector<int>& nums, int begin, int end, int target)
    {  
        int l = begin;
        int r = end;
        while(l<r) {
            if (nums[l] + nums[r] + target == 0) {
                vector<int> vec;
                vec.push_back(nums[l]);
                vec.push_back(nums[r]);
                vec.push_back(target);
                ret.push_back(vec);
                while(l<r && nums[l+1] == nums[l]) l++;  // get rid of duplication
                while(l<r && nums[r-1] == nums[r]) r--;
                l++;
                r--;
            } else if (nums[l] + nums[r] + target < 0) {
                l++;
            } else {
                r--;
            }
        }
    }
};
