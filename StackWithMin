设计一个包含min函数的栈
#include<iostream>
#include<assert.h>
#include<stack>
using namespace std;

template<typename T>
class StackWithMin
{
private:
	stack<T> m_data;
	stack<T> min_data;
public:
	void push(const T&);
	void pop();
	const T& min();
};

// 注意template需要在每个用到T的地方
template<typename T>
void StackWithMin<T>::push(const T& data)
{
	m_data.push(data);
	if (min_data.size() == 0 || min_data.top() > data) {
		min_data.push(data);
	}
	else {
		min_data.push(min_data.top());
	}
}
template<typename T>
void StackWithMin<T>::pop()
{
	assert(min_data.size() > 0 && m_data.size() > 0);
	min_data.pop();
	m_data.pop();
}
template<typename T>
const T& StackWithMin<T>::min()
{
	assert(min_data.size() > 0 && m_data.size() > 0);
	return min_data.top();
}

int main()
{
	StackWithMin<int> test; //notice <int>, not equal to NULL
	for (int i = 5; i>1; i--) {
		test.push(i);
	}
	cout << test.min() << endl;
	test.pop();
	cout << test.min() << endl;
}
// 2
// 3
