在一个长度为n的整形数组a里，除了三个数字只出现一次外，其他的数字都出现了2次。请写程序输出任意一个只出现一次的数字，程序时间和空间复杂度越小越好。
例如： a = {1,3,7,9,5,9,4,3,6,1,7}，输出4或5或6
思路：把整个数组分为两部分，每个部分都包含一个只出现过一次的元素和若干对重复元素，分别求出这两个子数组中的唯一元素即可。

1. 首先用0依次异或数组中每一个元素，因为相同的元素异或得到0，所以最终的答案就等于那2个唯一的元素a^b的值。

2. 因为a,b不同，所以异或得到的答案肯定是不等于0的，那么我们就找到a^b的二进制表示中第一个为1的位，假如是第k位。而a,b两个数在第k位上是不同的，一个为0，一个为1

3. 接下来我们将第k位是1的分成一组，第k位是0的分成一组，如果2个元素相同，那么他们第k位肯定是一样的，所以肯定被分到同一组中。而a,b则被分到2组中去了。


wqu-m01:code wqu$ ./a.out 
5
wqu-m01:code wqu$ !c
cat test.cpp 
#include <iostream>  
#include<time.h>

using namespace std;  

// 得到从右向左第一个为1的位
int lowbit(int x)
{
	return x&~(x-1);
}
int yixing(int arr[], int n)
{
	if(n<=0 || arr == NULL) {
		return -1;
	}
	int result = 0;
	int xors = 0;
	for(int i=0;i<n;i++) {
		xors ^= arr[i];  // a^b^c
	}
	int fips = 0;
	for(int i=0;i<n;i++) {
		fips ^= lowbit(xors^arr[i]);
	} //  fips = lowbit(a^b)^lowbit(b^c)^lowbit(a^c)
	for(int i=0;i<n;i++) {
		if(fips == lowbit(xors^arr[i])) {
			result ^= arr[i];
		}
	}
	return result;
}
int main()
{
   int a[11] = {1,3,7,9,5,9,4,3,6,1,7};
   cout<<yixing(a, 11)<<endl;
}
